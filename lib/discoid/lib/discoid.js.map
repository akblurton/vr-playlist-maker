{"version":3,"sources":["../../src/lib/discoid.js"],"names":["local","network","isWin","test","process","platform","results","getLocalMounts","obj","discsLocal","parseLocalResults","getNetworkMounts","discsNetwork","parseNetworkResults","Promise","resolve","list","path","fromPath","cmd","pipe","shell","toJson","getUUIDFromQualifiers","qualifiers","trimTrailingSlash","filter","q","Name","Value","getUUIDFromPath","split","slice","getHost","json","Object","entries","map","key","val","host","providerName","size","unc","letter","name","free","freeSpace","fs","fileSystem","uuid","type","discs","filterReserved","uniqueId","driveLetter","sizeRemaining","cimSystemProperties","serverName","toLowerCase","driveType","disc","fileSystemLabel"],"mappings":"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","file":"discoid.js","sourcesContent":["import mountvol from './mountvol'\r\nimport ps from 'windows-powershell'\r\n\r\n// Network Mounts\r\n// Get-WmiObject Win32_LogicalDisk | where -property DriveType -eq 4 | convertto-json\r\n\r\n// Local Volumes\r\n// get-volume | convertto-json\r\n\r\nexport async function list ({ local = true, network = true } = {}) {\r\n  const isWin = /^win/.test(process.platform)\r\n  let results = []\r\n\r\n  if (isWin) {\r\n    if (local) {\r\n      const obj = await getLocalMounts()\r\n      const discsLocal = parseLocalResults(obj)\r\n\r\n      results = [\r\n        ...results,\r\n        ...discsLocal\r\n      ]\r\n    }\r\n\r\n    if (network) {\r\n      const obj = await getNetworkMounts()\r\n      const discsNetwork = parseNetworkResults(obj)\r\n\r\n      results = [\r\n        ...results,\r\n        ...discsNetwork\r\n      ]\r\n    }\r\n\r\n    return results\r\n  }\r\n\r\n  return Promise.resolve([])\r\n}\r\n\r\nexport async function fromPath (path) {\r\n  const isWin = /^win/.test(process.platform)\r\n\r\n  return Promise.resolve([])\r\n}\r\n\r\nfunction getNetworkMounts () {\r\n  const cmd = ps.pipe(\r\n    'Get-WmiObject Win32_LogicalDisk',\r\n    'where -property DriveType -eq 4'\r\n  )\r\n\r\n  return ps.shell(ps.toJson(cmd))\r\n}\r\n\r\nfunction getLocalMounts () {\r\n  const cmd = ps.pipe(\r\n    'get-volume',\r\n    'where -property DriveType -ne 9999'\r\n  )\r\n\r\n  return ps.shell(ps.toJson(cmd))\r\n}\r\n\r\nfunction getUUIDFromQualifiers (qualifiers) {\r\n  return trimTrailingSlash(\r\n    qualifiers\r\n      .filter(q => q.Name === 'UUID')[0]\r\n      .Value\r\n  )\r\n}\r\n\r\nfunction getUUIDFromPath (path) {\r\n  return path.split('\\\\')[3].slice(7, -2)\r\n}\r\n\r\nfunction getHost (path) {\r\n  return path.split('\\\\')[2]\r\n}\r\n\r\nfunction parseNetworkResults (obj) {\r\n  if (!('json' in obj)) return [] // No network volumes mounts\r\n\r\n  if (!('0' in obj.json))\r\n    obj.json = { '0': obj.json }\r\n\r\n  return Object.entries(obj.json).map(([key, val]) => {\r\n    return {\r\n      host: getHost(val.providerName),\r\n      size: val.size,\r\n      unc: val.providerName,\r\n      letter: val.name[0],\r\n      free: val.freeSpace,\r\n      fs: val.fileSystem,\r\n      uuid: getUUIDFromQualifiers(val.qualifiers),\r\n      type: 'network'\r\n    }\r\n  })\r\n}\r\n\r\nfunction parseLocalResults (obj) {\r\n  if (!('0' in obj.json))\r\n    obj.json = { '0': obj.json }\r\n\r\n  const discs = Object.entries(obj.json)\r\n    .map(([key, val]) => val)\r\n    .filter(filterReserved)\r\n\r\n  return discs.map(val => {\r\n    return {\r\n      size: val.size,\r\n      unc: val.uniqueId.slice(0, -1),\r\n      letter: val.driveLetter,\r\n      free: val.sizeRemaining,\r\n      fs: val.fileSystem,\r\n      host: val.cimSystemProperties.serverName.toLowerCase(),\r\n      uuid: getUUIDFromPath(val.uniqueId),\r\n      type: val.driveType.toLowerCase(val.uniqueId)\r\n    }\r\n  })\r\n}\r\n\r\nfunction trimTrailingSlash (path) {\r\n  return path\r\n    .slice(0, -1)\r\n    .slice(1)\r\n}\r\n\r\nfunction filterReserved (disc) {\r\n  return disc.fileSystemLabel !== 'System Reserved'\r\n}\r\n"]}