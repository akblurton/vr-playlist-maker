{"version":3,"sources":["../../src/lib/mountvol.js"],"names":["listing","results","exec","parse","mountvol","require","command","Promise","res","rej","error","stdout","stderr","i","volumes","toString","split","length","line","trim","nextLine","isPath","startsWith","obj","buildVolObject","push","uncPath","firstMount","guid","parseGuid","unc","buildUnc","mount","parseMount","mounts","format","path","match","matches","module","exports"],"mappings":";;;;;;;;;;AAGA;;;;;;0EAKA,iBAAwBA,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,+BADR;;AAAA,4BAGSD,OAHT;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAIwBE,MAJxB;;AAAA;AAIQF,+BAJR;;AAAA;AAAA,yDAMWG,MAAMH,OAAN,CANX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeI,Q;;;;;AARf;;;;AACA;;;;;;AAcC;;AAED;;;;AAIA,IAAIF,OAAO,gBAAW;AAClB,QAAIA,OAAOG,QAAQ,eAAR,EAAyBH,IAApC;AACA,QAAII,UAAU,UAAd;;AAEA,WAAO,IAAIC,OAAJ,CAAY,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC7BP,aAAKI,OAAL,EAAc,UAASI,KAAT,EAAgBC,MAAhB,EAAwBC,MAAxB,EAAgC;AAC1C,gBAAIF,KAAJ,EAAWD,IAAIC,KAAJ,EAAX,KACKF,IAAIG,MAAJ;AACR,SAHD;AAIH,KALM,CAAP;AAMH,CAVD;;AAYA;;;;;AAKA,IAAIR,QAAQ,SAARA,KAAQ,CAASF,OAAT,EAAkB;AAC1B;;AAEA,QAAIY,IAAI,CAAR;AACA,QAAIC,UAAU,EAAd;AACA,QAAIb,UAAUA,QACTc,QADS,GAETC,KAFS,CAEH,IAFG,CAAd;;AAIA,WAAOH,IAAIZ,QAAQgB,MAAnB,EAA2B;AACvB,YAAIC,OAAOjB,QAAQY,CAAR,EAAWM,IAAX,EAAX;AACA,YAAIC,WAAWnB,QAAQY,IAAI,CAAZ,CAAf;AACA,YAAIQ,SAAS,sBAAEH,IAAF,EAAQI,UAAR,CAAmB,IAAnB,CAAb;;AAEA,YAAID,MAAJ,EAAY;AACR,gBAAIE,MAAMC,eAAeN,IAAf,EAAqBE,QAArB,CAAV;AACAN,oBAAQW,IAAR,CAAaF,GAAb;AACH;;AAEDV;AACH;;AAED,WAAOC,OAAP;AACH,CAvBD;;AAyBA;;;;;;AAMA,IAAIU,iBAAiB,SAAjBA,cAAiB,CAASE,OAAT,EAAkBC,UAAlB,EAA8B;AAC/C,QAAIJ,MAAM,EAAV;AACA,QAAIK,OAAOC,UAAUH,OAAV,CAAX;AACA,QAAII,MAAMC,SAASH,IAAT,CAAV;AACA,QAAII,QAAQC,WAAWN,UAAX,CAAZ;;AAEA,QAAIC,IAAJ,EAAUL,IAAIK,IAAJ,GAAWA,IAAX;AACV,QAAIE,GAAJ,EAASP,IAAIO,GAAJ,GAAUA,GAAV;AACT,QAAIE,KAAJ,EAAWT,IAAIW,MAAJ,GAAa,CAACF,KAAD,CAAb;;AAEX,WAAOT,GAAP;AACH,CAXD;;AAaA;;;;;AAKA,IAAIQ,WAAW,SAAXA,QAAW,CAASH,IAAT,EAAe;AAC1B,WAAO,eAAKO,MAAL,CAAY,qBAAZ,EAAmCP,IAAnC,CAAP;AACH,CAFD;;AAIA;;;;;AAKA,IAAIC,YAAY,SAAZA,SAAY,CAASO,IAAT,EAAe;AAC3B,WAAOA,KAAKC,KAAL,CAAW,+DAAX,EAA4E,CAA5E,CAAP;AACH,CAFD;;AAIA;;;;;AAKA,IAAIJ,aAAa,SAAbA,UAAa,CAASD,KAAT,EAAgB;AAC7B,QAAIA,QAAQA,MAAMb,IAAN,EAAZ;AACA,QAAImB,UAAUN,MAAMK,KAAN,CAAY,aAAZ,CAAd;;AAEA,QAAIC,YAAY,IAAhB,EAAsB,OAAO,IAAP,CAAtB,KACK,OAAOA,QAAQ,CAAR,CAAP;AACR,CAND;;AAQAC,OAAOC,OAAP,GAAiBpC,QAAjB","file":"mountvol.js","sourcesContent":["import _ from 'lodash'\r\nimport util from 'util'\r\n\r\n/**\r\n * Initializes the mountvol constructor.\r\n * @constructor\r\n * @param {string} listing - Provive command results manually (ex: testing)\r\n */\r\nasync function mountvol(listing) {\r\n    let results;\r\n\r\n    if (!listing)\r\n        listing = await exec();\r\n\r\n    return parse(listing);\r\n};\r\n\r\n/**\r\n * Execute the mountvol application.\r\n * @constructor\r\n */\r\nlet exec = function() {\r\n    let exec = require('child_process').exec;\r\n    let command = \"mountvol\";\r\n\r\n    return new Promise((res, rej) => {\r\n        exec(command, function(error, stdout, stderr) {\r\n            if (error) rej(error);\r\n            else res(stdout);\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Parses the results of the mountvol command.\r\n * @constructor\r\n * @param {string} results - The mountvol results to be parsed\r\n */\r\nvar parse = function(results) {\r\n    // TODO: Convert this to a stream\r\n\r\n    let i = 0;\r\n    let volumes = [];\r\n    var results = results\r\n        .toString()\r\n        .split(\"\\n\");\r\n\r\n    while (i < results.length) {\r\n        let line = results[i].trim();\r\n        let nextLine = results[i + 1];\r\n        let isPath = _(line).startsWith('\\\\');\r\n\r\n        if (isPath) {\r\n            let obj = buildVolObject(line, nextLine);\r\n            volumes.push(obj);\r\n        }\r\n\r\n        i++;\r\n    }\r\n\r\n    return volumes;\r\n}\r\n\r\n/**\r\n * Build a volume object based on a given UNC path\r\n * @constructor\r\n * @param {string} uncPath - Full UNC path of a volume\r\n * @param {string} firstMount - raw string of the first mount\r\n */\r\nlet buildVolObject = function(uncPath, firstMount) {\r\n    let obj = {};\r\n    let guid = parseGuid(uncPath);\r\n    let unc = buildUnc(guid);\r\n    let mount = parseMount(firstMount);\r\n\r\n    if (guid) obj.guid = guid;\r\n    if (unc) obj.unc = unc;\r\n    if (mount) obj.mounts = [mount];\r\n\r\n    return obj;\r\n}\r\n\r\n/**\r\n * Build a UNC path from a guid.\r\n * @constructor\r\n * @param {string} guid - The GUID for a given volume\r\n */\r\nlet buildUnc = function(guid) {\r\n    return util.format('\\\\\\\\?\\\\Volume{%s}\\\\', guid);\r\n}\r\n\r\n/**\r\n * Obtain the raw guid from the given path.\r\n * @constructor\r\n * @param {string} path - path containing the guid\r\n */\r\nlet parseGuid = function(path) {\r\n    return path.match(/[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}/i)[0];\r\n}\r\n\r\n/**\r\n * Obtain the mount point of a volume.\r\n * @constructor\r\n * @param {string} mount - possible mount point\r\n */\r\nlet parseMount = function(mount) {\r\n    var mount = mount.trim();\r\n    let matches = mount.match(/[a-zA-Z]:\\\\/);\r\n\r\n    if (matches === null) return null;\r\n    else return matches[0];\r\n}\r\n\r\nmodule.exports = mountvol;\r\n"]}